// Generated by CoffeeScript 1.8.0
(function() {
    var BubbleChart, root,
        __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

    BubbleChart = (function() {
        function BubbleChart(data) {
            this.hide_details = __bind(this.hide_details, this);
            this.show_details = __bind(this.show_details, this);
            this.hide_years = __bind(this.hide_years, this);
            this.display_years = __bind(this.display_years, this);
            this.move_towards_year = __bind(this.move_towards_year, this);
            this.display_by_year = __bind(this.display_by_year, this);
            this.move_towards_center = __bind(this.move_towards_center, this);
            this.display_group_all = __bind(this.display_group_all, this);
            this.start = __bind(this.start, this);
            this.create_vis = __bind(this.create_vis, this);
            this.create_nodes = __bind(this.create_nodes, this);
            var max_amount;
            this.data = data;
            this.width = 940;
            this.height = 600;
            this.tooltip = CustomTooltip("gates_tooltip", 240);
            this.genre_array = [];
            this.center = {
                x: this.width / 2,
                y: this.height / 2
            };
            this.year_centers = {
                "book": {
                    x: (this.width / 3)-100,
                    y: this.height / 2
                },
                "television": {
                    x: this.width / 2,
                    y: this.height / 2
                },
                "movie": {
                    x: (2 * this.width / 3)+100,
                    y: this.height / 2
                }
            };
            this.layout_gravity = -0.01;
            this.damper = 0.1;
            this.vis = null;
            this.nodes = [];
            this.force = null;
            this.circles = null;
            this.fill_color = d3.scale.ordinal().domain(["low", "medium", "high"]).range(["#d84b2a", "#beccae", "#7aa25c"]);
            max_amount = d3.max(this.data, function(d) {
                return parseInt(d.total_amount);
            });
            this.radius_scale = d3.scale.pow().exponent(0.5).domain([0, max_amount]).range([2, 85]);
            this.create_nodes();
            this.create_vis();

        }

        BubbleChart.prototype.create_nodes = function() {

            this.data.forEach((function(_this) {
                return function(d) {

                    if(this.genre_array === undefined)this.genre_array = [];

                    if(this.genre_array.indexOf(d.genre) == -1){
                        this.genre_array.push(d.genre);

                    }

                    var node;
                    node = {

                        radius: 50,//_this.radius_scale(parseInt(5000)),
                        value: 5000,
                        name: d.title,
                        org: d.genre,
                        group: d.genre,
                        year: 2010,


                        id: d.id,
                        title: d.title,
                        genre: d.genre,
                        author: d.author,
                        x: Math.random() * 900,
                        y: Math.random() * 800
                    };

;                    return _this.nodes.push(node);
                };

            })(this));
            return this.nodes.sort(function(a, b) {
                return b.value - a.value;
            });
        };

        BubbleChart.prototype.create_vis = function() {
            var that;

            this.vis = d3.select("#chart_bubble_test").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis")

            that = this;

            this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {

                console.log(d.genre)



                return d.id;
            });


            var elemEnter = this.circles.enter();

            var circle = elemEnter.append("circle");

            circle.attr("r", 0);



            circle.attr("fill",  function(d) {
                var fill;
                if(d.genre === "television")
                    fill = "#FF0000"
                else if(d.genre === "book")
                    fill = "#FFFFFF"
                else
                    fill = "#666000";

                return fill;

            });



            circle.attr("stroke-width", 2).attr("stroke", "black")

            circle.attr("id", function(d) {
                return "bubble_" + d.id;
            })

            circle.on("mouseover", function(d, i) {
                return that.show_details(d, i, this);
            })

            circle.on("mouseout", function(d, i) {
                return that.hide_details(d, i, this);
            });


          /*  elemEnter.append("text")
                .attr("dx", ".35em")
                .attr("dy", ".35em")
                .style("text-anchor", "middle")
                .text(function (d) {console.log("add text: "+ d.title);return "hsdfgsdfgsdfgi"+d.title;});
*/


            return this.circles.transition().duration(2000).attr("r", function(d) {
                return d.radius;
            });
        };

        BubbleChart.prototype.charge = function(d) {
            return -Math.pow(d.radius, 2.0) / 8;
        };

        BubbleChart.prototype.start = function() {
            return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
        };

        BubbleChart.prototype.display_group_all = function() {
            this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
                return function(e) {
                    return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function(d) {
                        return d.x;
                    }).attr("cy", function(d) {
                        return d.y;
                    });
                };
            })(this));
            this.force.start();
            return this.hide_years();
        };

        BubbleChart.prototype.move_towards_center = function(alpha) {
            return (function(_this) {
                return function(d) {
                    d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.02) * alpha;
                    return d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.02) * alpha;
                };
            })(this);
        };

        BubbleChart.prototype.display_by_year = function() {

            this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
                return function(e) {
                    return _this.circles.each(_this.move_towards_year(e.alpha)).attr("cx", function(d) {
                        return d.x;
                    }).attr("cy", function(d) {
                        return d.y;
                    });
                };
            })(this));
            this.force.start();
            return this.display_years();
        };

        BubbleChart.prototype.move_towards_year = function(alpha) {
            return (function(_this) {
                return function(d) {
                    var target;

                    target = _this.year_centers[d.genre];

                    d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
                    return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
                };
            })(this);
        };

        BubbleChart.prototype.display_years = function() {
            var years, years_data, years_x;
            years_x = {
                "books": 160,
                "television": this.width / 2,
                "movies": this.width - 160
            };
            years_data = d3.keys(years_x);
            years = this.vis.selectAll(".years").data(years_data);
            return years.enter().append("text").attr("class", "years").attr("x", (function(_this) {
                return function(d) {
                    return years_x[d];
                };
            })(this)).attr("y", 40).attr("text-anchor", "middle").text(function(d) {

                return d;
            });
        };

        BubbleChart.prototype.hide_years = function() {
            var years;
            return years = this.vis.selectAll(".years").remove();
        };

        BubbleChart.prototype.show_details = function(data, i, element) {
            var content;
            d3.select(element).attr("stroke", "black");
            content = "<span class=\"name\">Title:</span><span class=\"value\"> " + data.title + "</span><br/>";
            content += "<span class=\"name\">Genre:</span><span class=\"value\"> " + data.genre + "</span><br/>";
            content += "<span class=\"name\">Author:</span><span class=\"value\"> " + data.author + "</span>";

            return this.tooltip.showTooltip(content, d3.event);
        };

        BubbleChart.prototype.hide_details = function(data, i, element) {
            d3.select(element).attr("stroke", (function(_this) {
                return function(d) {
                    return d3.rgb(_this.fill_color(d.group)).darker();
                };
            })(this));
            return this.tooltip.hideTooltip();
        };

        return BubbleChart;

    })();

    root = typeof exports !== "undefined" && exports !== null ? exports : this;

    $(function() {
        var chart, render_vis;
        chart = null;
        $("#show_media").click(function(){
            root.display_year();
            $(this).parent().addClass("active");
            $("#centered_button").parent().removeClass("active");

        })

        $("#centered_button").click(function(){
            $(this).parent().addClass("active");
            $("#show_media").parent().removeClass("active");
            root.display_all();

        })

        render_vis = function(csv) {
            chart = new BubbleChart(csv);
            chart.start();
            return root.display_all();
        };
        root.display_all = (function(_this) {
            return function() {
                return chart.display_group_all();
            };
        })(this);
        root.display_year = (function(_this) {
            return function() {
                return chart.display_by_year();
            };
        })(this);
        root.toggle_view = (function(_this) {
            return function(view_type) {
                if (view_type === 'year') {
                    return root.display_year();
                } else {
                    return root.display_all();
                }
            };
        })(this);
        return d3.json("/graphs/grab_json", render_vis);
    });

}).call(this);