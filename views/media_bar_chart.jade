extends layout
block content


   svg#chart
   svg#chart_bubble

   script.
       var data; // a global
       d3.json("/graphs/grab_json", function (error, json) {
           if (error) return console.warn(error);
           data = json;
           var width = 420, barHeight = 20;
           var x = d3.scale.linear().domain([0, 500]).range([0, width]);
           var chart = d3.select("#chart").attr("width", width).attr("height", barHeight * data.length);
           var bar = chart.selectAll("g").data(data).enter().append("g").attr("transform", function (d, i) {
               return "translate(0," + i * barHeight + ")";
           });
           bar.append("rect").attr("width", 1200).attr("height", barHeight - 1);
           bar.append("text").attr("x", 300).attr("y", barHeight / 2).attr("dy", ".35em").text(function (d) {
               return d.title;
           });
           var diameter = 960,
                   format = d3.format(",d"),
                   color = d3.scale.category20c();
           var bubble = d3.layout.pack()
                   .sort(null)
                   .size([diameter, diameter])
                   .padding(1.5);
           var svg = d3.select("#chart_bubble")
                   .attr("width", diameter)
                   .attr("height", diameter)
                   .attr("class", "bubble");
           d3.json("/graphs/grab_json", function (error, root) {
               if (error) throw error;
               var counter = 0;
               var node = svg.selectAll("g")
                       .data(data)
                       .enter().append("g")
                       .attr("class", "node")
                       .attr("transform", function (d) {
                           counter += 100;
                           return "translate(" + counter + "," + counter + ")";
                       });
               node.append("title")
                       .text(function (d) {
                           return d.className + ": " + format(d.title);
                           console.log(d.title);
                       });
               node.append("circle")
                       .attr("r", 50)
                       .style("fill", function (d) {
                           return color(d.packageName);
                       });
               node.append("text")
                       .attr("dy", ".35em")
                       .style("text-anchor", "middle")
                       .style("color", "#FFFFFF")
                       .text(function (d) {
                           return d.title;
                       });
               node.transition();
           });
           // Returns a flattened hierarchy containing all leaf nodes under the root.
           function classes(root) {
               var classes = [];

               function recurse(name, node) {
                   if (node.children) node.children.forEach(function (child) {
                       recurse(node.name, child);
                   });
                   else classes.push({packageName: name, className: node.name, value: node.size});
               }

               recurse(null, root);
               return {children: classes};
           }

           d3.select(self.frameElement).style("height", diameter + "px");
       });
