extends layout

block content
  svg.chart

  script.
    var margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;
    var x = d3.scale.ordinal()
      .rangeRoundBands([0, width], .1);
      var y = d3.scale.linear()
      .range([height, 0]);
      var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom");
    var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left")
      .ticks(10, "%");
    var svg = d3.select("body").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    d3.tsv("data.tsv", type, function(error, data) {
    if (error) throw error;
    x.domain(data.map(function(d) { return d.letter; }));
      y.domain([0, d3.max(data, function(d) { return d.frequency; })]);
      svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);
      svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
      .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("Frequency");
      svg.selectAll(".bar")
        .data(data)
      .enter().append("rect")
        .attr("class", "bar")
        .attr("x", function(d) { return x(d.letter); })
        .attr("width", x.rangeBand())
        .attr("y", function(d) { return y(d.frequency); })
        .attr("height", function(d) { return height - y(d.frequency); });
    });
    function type(d) {
      d.frequency = +d.frequency;
      return d;
    }



var data; // a global
  d3.json("/graphs/grab_json", function (error, json) {
  if (error) return console.warn(error);
  data = json;
  var width = 420, barHeight = 20;
  var x = d3.scale.linear().domain([0, 500]).range([0, width]);
  var chart = d3.select("#chart").attr("width", width).attr("height", barHeight * data.length);
  var bar = chart.selectAll("g").data(data).enter().append("g").attr("transform", function (d, i) {
  return "translate(0," + i * barHeight + ")";
  });
    bar.append("rect").attr("width", 1200).attr("height", barHeight - 1);
    bar.append("text").attr("x", 300).attr("y", barHeight / 2).attr("dy", ".35em").text(function (d) {
      return d.title;
  });
var diameter = 960,
format = d3.format(",d"),
color = d3.scale.category20c();
var bubble = d3.layout.pack()
  .sort(null)
  .size([diameter, diameter])
  .padding(1.5);
var svg = d3.select("#chart_bubble")
  .attr("width", diameter)
  .attr("height", diameter)
  .attr("class", "bubble");
d3.json("/graphs/grab_json", function (error, root) {
if (error) throw error;
var counter = 0;
var node = svg.selectAll("g")
.data(data)
  .enter().append("g")
  .attr("class", "node")
  .attr("transform", function (d) {
    counter += 100;
    return "translate(" + counter + "," + counter + ")";
});
node.append("title")
  .text(function (d) {
    return d.className + ": " + format(d.title);
    console.log(d.title);
});
node.append("circle")
  .attr("r", 50)
  .style("fill", function (d) {
    return color(d.packageName);
});
node.append("text")
  .attr("dy", ".35em")
  .style("text-anchor", "middle")
  .style("color", "#FFFFFF")
  .text(function (d) {
    return d.title;
});
node.transition();
});
// Returns a flattened hierarchy containing all leaf nodes under the root.
function classes(root) {
  var classes = [];

  function recurse(name, node) {
    if (node.children) node.children.forEach(function (child) {
      recurse(node.name, child);
  });
else classes.push({packageName: name, className: node.name, value: node.size});
}

recurse(null, root);
return {children: classes};
}

d3.select(self.frameElement).style("height", diameter + "px");
});
